// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5506.RecycleRush.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc5506.RecycleRush.Robot;

/**
 * @author Noah Howard
 * 
 * Yes. This robot will know the cupid shuffle.
 */
public class  CupidShuffle extends Command {

    public CupidShuffle() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.driveTrain.getGyro().initGyro(); // Init the gyro when the robot is still
    }

    // TODO: Tweak speed values based on time
    protected void execute() {
    	goGoCupidShuffle(); // TODO: Gotta do this four times, I think once is enough to test it
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
    
    private void goGoCupidShuffle() {
    	while(Robot.driveTrain.getGyro().getAngle() < 45) {
    		Robot.driveTrain.softRightTurn();
    	}
    	Robot.driveTrain.stopDriving();
    	
    	Robot.driveTrain.getWheelRotations().reset();
    	while(Robot.driveTrain.getWheelRotations().get() < 1.27388) {
    		Robot.driveTrain.driveForward();
    	}
    	Robot.driveTrain.stopDriving();
    	
    	while(Robot.driveTrain.getGyro().getAngle() < -45) { // I think the negative is right, fact check time
    		Robot.driveTrain.softLeftTurn();
    	}
    	Robot.driveTrain.stopDriving();
    	
    	Robot.driveTrain.getWheelRotations().reset();
    	while(Robot.driveTrain.getWheelRotations().get() < 1.27388) {
    		Robot.driveTrain.driveForward();
    	}
    	Robot.driveTrain.stopDriving();
    	
    	while(Robot.driveTrain.getGyro().getAngle() < 45) {
    		Robot.driveTrain.softRightTurn();
    	}
    	Robot.driveTrain.stopDriving();
    	
    	Robot.driveTrain.getWheelRotations().reset();
    	while(Robot.driveTrain.getWheelRotations().get() < 0.10615) { // 2 inches
    		Robot.driveTrain.softRightTurn();
    	}
    	Robot.driveTrain.stopDriving();
    	
    	Robot.driveTrain.getWheelRotations().reset();
    	while(Robot.driveTrain.getWheelRotations().get() < -0.10615) { // 2 inches
    		Robot.driveTrain.getRightMotor().set(-0.5);
    	}
    	Robot.driveTrain.stopDriving();
    	
    	Robot.driveTrain.getWheelRotations().reset();
    	while(Robot.driveTrain.getWheelRotations().get() < 0.10615) { // 2 inches
    		Robot.driveTrain.softLeftTurn();
    	}
    	Robot.driveTrain.stopDriving();
    	
    	Robot.driveTrain.getWheelRotations().reset();
    	while(Robot.driveTrain.getWheelRotations().get() < -0.10615) { // 2 inches
    		Robot.driveTrain.getLeftMotor().set(-0.5);
    	}
    	Robot.driveTrain.stopDriving();
    	
    	Robot.driveTrain.getWheelRotations().reset();
    	while(Robot.driveTrain.getWheelRotations().get() < 0.10615) { // 2 inches
    		Robot.driveTrain.softRightTurn();
    	}
    	Robot.driveTrain.stopDriving();
    	
    	Robot.driveTrain.getWheelRotations().reset();
    	while(Robot.driveTrain.getWheelRotations().get() < -0.10615) { // 2 inches
    		Robot.driveTrain.getRightMotor().set(-0.5);
    	}
    	Robot.driveTrain.stopDriving();
    	
    	Robot.driveTrain.getWheelRotations().reset();
    	while(Robot.driveTrain.getWheelRotations().get() < 0.10615) { // 2 inches
    		Robot.driveTrain.softLeftTurn();
    	}
    	Robot.driveTrain.stopDriving();
    	
    	Robot.driveTrain.getWheelRotations().reset();
    	while(Robot.driveTrain.getWheelRotations().get() < -0.10615) { // 2 inches
    		Robot.driveTrain.getLeftMotor().set(-0.5);
    	}
    	Robot.driveTrain.stopDriving();
    	
    	while(Robot.driveTrain.getGyro().getAngle() < -45) { // I think the negative is right, fact check time
    		Robot.driveTrain.softLeftTurn();
    	}
    	Robot.driveTrain.stopDriving();
    }
}
