// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5506.RecycleRush;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainleftMotor;
    public static SpeedController driveTrainrightMotor;
    public static RobotDrive driveTrainMotors;
    public static Encoder driveTrainwheelRotations;
    public static Gyro driveTraingyro;
    public static Ultrasonic driveTrainrangeFinder;
    public static DoubleSolenoid armsarmSolenoid;
    public static DigitalInput armsarmWidthLimit;
    public static DoubleSolenoid elevatorleftSolenoid;
    public static DoubleSolenoid elevatorrightSolenoid;
    public static DigitalInput elevatorlimitSwitch;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainleftMotor = new Talon(0);
        LiveWindow.addActuator("DriveTrain", "leftMotor", (Talon) driveTrainleftMotor);
        
        driveTrainrightMotor = new Talon(1);
        LiveWindow.addActuator("DriveTrain", "rightMotor", (Talon) driveTrainrightMotor);
        
        driveTrainMotors = new RobotDrive(driveTrainleftMotor, driveTrainrightMotor);
        
        driveTrainMotors.setSafetyEnabled(true);
        driveTrainMotors.setExpiration(0.1);
        driveTrainMotors.setSensitivity(0.5);
        driveTrainMotors.setMaxOutput(1.0);
        

        driveTrainwheelRotations = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "wheelRotations", driveTrainwheelRotations);
        driveTrainwheelRotations.setDistancePerPulse(1.0);
        driveTrainwheelRotations.setPIDSourceParameter(PIDSourceParameter.kRate);
        driveTraingyro = new Gyro(0);
        LiveWindow.addSensor("DriveTrain", "gyro", driveTraingyro);
        driveTraingyro.setSensitivity(0.007);
        driveTrainrangeFinder = new Ultrasonic(4, 5);
        LiveWindow.addSensor("DriveTrain", "rangeFinder", driveTrainrangeFinder);
        
        armsarmSolenoid = new DoubleSolenoid(0, 0, 1);      
        LiveWindow.addActuator("Arms", "armSolenoid", armsarmSolenoid);
        
        armsarmWidthLimit = new DigitalInput(1);
        LiveWindow.addSensor("Arms", "armWidthLimit", armsarmWidthLimit);
        
        elevatorleftSolenoid = new DoubleSolenoid(0, 2, 3);      
        LiveWindow.addActuator("Elevator", "leftSolenoid", elevatorleftSolenoid);
        
        elevatorrightSolenoid = new DoubleSolenoid(0, 4, 5);      
        LiveWindow.addActuator("Elevator", "rightSolenoid", elevatorrightSolenoid);
        
        elevatorlimitSwitch = new DigitalInput(0);
        LiveWindow.addSensor("Elevator", "limitSwitch", elevatorlimitSwitch);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
